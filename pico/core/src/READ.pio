.program read

loop:                 ; wait for D0 || D1
    in null, 32       ; 
    in pins, 2        ;
    set y, 3
    mov x, isr        ;
    jmp x != y rxd    ;
    jmp loop          ;

rxd:
    push block        ; push D0 and D1 to FIFO

    set y,31          ; debounce/noise-gate
lp: nop [31]          ;
    jmp y-- lp        ;

loop1:                ; wait for !D0 && !D1
    in null, 32       ;
    in pins, 2        ;
    mov y, isr        ;
    jmp x != y loop   ;
    jmp loop1         ;   


% c-sdk {
static inline void read_program_init(PIO pio, uint sm, uint offset, uint d0, uint d1) {
    uint32_t mask = (0x00000001 << d0) | (0x00000001 << d1) ;
    uint32_t dirs = (0x00000000 << d0) | (0x00000000 << d1) ;

    pio_gpio_init(pio, d0);
    pio_gpio_init(pio, d1);

    gpio_pull_up(d0);
    gpio_pull_up(d1);

    pio_sm_set_pindirs_with_mask(pio, sm, dirs, mask);

    pio_sm_config c = read_program_get_default_config(offset);
    
    sm_config_set_in_pins(&c, d0);
    sm_config_set_in_shift(&c,false,false,32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    sm_config_set_clkdiv(&c, 152.588);  // ~1.25ms noise gate delay

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline uint32_t read_program_get(PIO pio, uint sm) {
    io_rw_32 *fifo = (io_rw_32 *)&pio->rxf[sm];

    if (!pio_sm_is_rx_fifo_empty(pio, sm)) {
        return *fifo;
    }

    return 0;
}

%}  