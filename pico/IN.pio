.program reader

loop:                 ; wait for D0/D1
    in null, 32       ; 
    in pins, 2        ;
    set y, 3
    mov x, isr        ;
    jmp x != y rx     ;
    jmp loop          ;

rx: push block        ; push D0/D1 to FIFO

    set y,31          ; debounce
lp: nop [31]          ;
    jmp y-- lp        ;
    set y,31          ; 
lp1: nop [31]         ;
    jmp y-- lp1       ;

loop1:                ; wait for !D0 && !D1
    in null, 32       ;
    in pins, 2        ;
    mov y, isr        ;
    jmp x != y loop   ;
    jmp loop1         ;   


% c-sdk {
static inline void reader_program_init(PIO pio, uint sm, uint offset, uint led, uint d0, uint d1, float div) {
    pio_sm_set_pindirs_with_mask(pio, sm, 0x00004000, 0x00034000);

    pio_gpio_init(pio, led);
    pio_gpio_init(pio, d0);
    pio_gpio_init(pio, d1);

    gpio_pull_up(d0);
    gpio_pull_up(d1);

    pio_sm_config c = reader_program_get_default_config(offset);
    
    sm_config_set_set_pins(&c, led, 1);
    sm_config_set_in_pins(&c, d0);
    sm_config_set_in_shift(&c,false,false,32);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline uint32_t reader_program_get(PIO pio, uint sm) {
    io_rw_32 *fifo = (io_rw_32 *)&pio->rxf[sm];

    if (!pio_sm_is_rx_fifo_empty(pio, sm)) {
        return *fifo;
    }

    return -1;
}

%}  