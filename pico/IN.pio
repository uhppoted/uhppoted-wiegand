.program reader
    pull block
    set y, 3

.wrap_target
    in null, 32
    in pins, 2
    mov x, isr
    jmp x != y blink
    jmp lpx

blink:
    push block

lpx:
    set pins, 1   ; Turn LED on
    mov x, osr
lp1:
    jmp x-- lp1   ; Delay for (x + 1) cycles, x is a 32 bit number
    set pins, 0   ; Turn LED off
    mov x, osr
lp2:
    jmp x-- lp2   ; Delay for the same number of cycles again
.wrap             ; Blink forever!


% c-sdk {
static inline void reader_program_init(PIO pio, uint sm, uint offset, uint led, uint d0, uint d1, float div) {
    pio_sm_set_pindirs_with_mask(pio, sm, 0x00004000, 0x00034000);

    pio_gpio_init(pio, led);
    pio_gpio_init(pio, d0);
    pio_gpio_init(pio, d1);

    gpio_pull_up(d0);
    gpio_pull_up(d1);

    pio_sm_config c = reader_program_get_default_config(offset);
    
    sm_config_set_set_pins(&c, led, 1);
    sm_config_set_in_pins(&c, d0);
    sm_config_set_in_shift(&c,false,false,32);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline uint32_t reader_program_get(PIO pio, uint sm) {
    io_rw_32 *fifo = (io_rw_32 *)&pio->rxf[sm];

    if (!pio_sm_is_rx_fifo_empty(pio, sm)) {
        return *fifo;
    }

    return -1;
}

%}  